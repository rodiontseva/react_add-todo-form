{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","props","user","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","userId","usersFromServer","find","App","useState","todoTitle","setTodoTitle","setUserId","visibleTodos","setVisibleTodos","errorEmptyTitle","setErrorEmptyTitle","errorEmptyUserId","setErrorEmptyUserId","action","method","onSubmit","event","preventDefault","prevTodos","Math","max","Number","type","placeholder","value","onChange","target","trim","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d192e58.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = (props) => {\n  const { user: { name, email } } = props;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../types/Todo';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = (props) => {\n  const {\n    todo: {\n      title,\n      completed,\n      user,\n      id,\n    },\n  } = props;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo/TodoInfo';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos } = props;\n\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\nimport { FC, useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { TodoList } from './components/TodoList/TodoList';\nimport { User } from './components/types/User';\nimport { Todo } from './components/types/Todo';\n// import { UserInfo } from './components/UserInfo/UserInfo';\n// import { TodoInfo } from './components/TodoInfo/TodoInfo';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nconst todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App: FC = () => {\n  const [todoTitle, setTodoTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n  const [errorEmptyTitle, setErrorEmptyTitle] = useState('');\n  const [errorEmptyUserId, setErrorEmptyUserId] = useState('');\n\n  const createNewTodo = () => {\n    const todoId = Math.max(...(todos.map(todo => todo.id))) + 1;\n\n    return (\n      {\n        id: todoId,\n        title: todoTitle,\n        completed: false,\n        userId,\n        user: usersFromServer.find(user => user.id === Number(userId)) || null,\n      }\n    );\n  };\n\n  const addNewTodo = (): void => {\n    if (!todoTitle) {\n      setErrorEmptyTitle('Please enter a title');\n    }\n\n    if (!userId) {\n      setErrorEmptyUserId('Please choose a user');\n    }\n\n    if (!todoTitle || !userId) {\n      return;\n    }\n\n    if (todoTitle && userId) {\n      setVisibleTodos((prevTodos) => [...prevTodos, createNewTodo()]);\n    }\n\n    setTodoTitle('');\n    setUserId(0);\n\n    setErrorEmptyTitle('');\n    setErrorEmptyUserId('');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          addNewTodo();\n        }}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Todo title\"\n            value={todoTitle}\n            onChange={(event) => {\n              setTodoTitle((event.target.value).trim());\n            }}\n          />\n          <span className=\"error\">\n            {!todoTitle && errorEmptyTitle}\n          </span>\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={(event) => setUserId(Number(event.target.value))}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {\n              usersFromServer.map(\n                user => <option value={user.id}>{user.name}</option>,\n              )\n            }\n\n          </select>\n\n          <span className=\"error\">\n            {!userId && errorEmptyUserId}\n          </span>\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={visibleTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}